
WHITESPACE = _{ " " | "\n" | "\t" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
NEWLINE = _{"\n" }
KEYWORD = {
"fn" | "of" | "to" | "at" | "is" | "impl" | "enum" | "and" |
"where" |  "return" | "contiune" | "break" | "yield"}

alpha = @{ 'a'..'z' | 'A'..'Z' }
digit = @{ '0'..'9' }
alphanum = @{alpha | digit}

ident = @{ !KEYWORD ~ (alpha ~ (alphanum | "_")*) }

type_tuple = { "(" ~ (typename ~ ("," ~ typename)*)? ~ ","? ~ ")" }
type_path = { path+ ~ gen_clause? }
typename = { type_path | type_tuple }

modifier = @{ !("fn") ~ ident }

attr_name = ${ "#" ~ ident }
attr_spec = ${ (!(NEWLINE) ~ ANY)* }
attr = ${ attr_name ~ (" " ~ attr_spec)? }
attr_list = @{ (attr ~(NEWLINE ~ attr))?  }

str_chars = _{ !"\"" ~ ANY }
str_lit = { "\"" ~ str_chars* ~ "\"" }
lit_expr = { int_lit | str_lit }
int_lit = @{ digit+ }

arg_list_more = { "," ~ expr }
arg_list = {  (expr ~ arg_list_more*)? ~ ","?}

path_expr = { ident ~ ("." ~ ident)* }
fn_tar = { brace_expr | path_expr }

arr_suffix = { "[" ~ expr ~  ("," ~ expr)* ~ "]" }
term = { (fn_expr | lit_expr | mod_expr | path_expr| brace_expr | loop_expr) ~ arr_suffix? }
op = {
"*" | "+" | "-" | "/" | "%" | ".." | "=" |
"*=" | "+=" | "-=" | "/=" | "%=" |
"<" | ">" | "<=" | ">=" | "!="
}
expr = { term ~ (op ~ term)* }

fn_expr = { fn_tar  ~ gen_clause? ~ "("~ arg_list ~ ")" }
mod_expr = { modifier ~ expr }
loop_expr = { "loop" ~ block }
brace_expr = { "(" ~ expr ~ ")" }

expr_stmt = { expr ~ (";" | "\n")? }

path_seg = { ident }
path = { path_seg ~ ("." ~ path_seg)* }
path_star = { path ~ ".*"? }
import_item = { path_star ~ ("as" ~ ident)? }
import_spec = { "use" ~ import_item ~( "," ~ import_item)* }

if_cont = { "else" ~ block }
if_stmt = { "if" ~ expr ~ block ~ if_cont* }
ass_stmt = { var_decl }
for_stmt = { "for" ~ ident ~ "in" ~ expr ~ block }

flow_op = !{ "return" | "continue" | "break" | "yield" }
flow_target = !{ "to" ~ ident }
flow_stmt = !{ flow_op ~ expr? ~ flow_target? ~ ";"? }

label = @{ ident ~ ":" }
stmt = { if_stmt | for_stmt| loop_expr | flow_stmt | ass_stmt | expr_stmt }
block_item_list = { (label | stmt)* }
block = { modifier* ~ "{" ~ block_item_list ~ "}" }

arg_decl = { ident ~ typename }
arg_decl_list = { (arg_decl ~ (","  ~ arg_decl)*)? ~ ","?}
fn_decl_args = { "(" ~ arg_decl_list ~ ")" }

gen_item = { typename }
gen_item_list = { (gen_item ~ ("," ~ gen_item)*)? }
gen_clause = { "of" ~ gen_item_list }

where_spec = { gen_item ~ "is" ~ typename }
where_spec_list = { where_spec ~ ("and" ~ where_spec)* }
where_clause = { "where" ~ where_spec_list }

vis = { "pub"? }

var_spec = { "let" | "mut" | "const" }
var_def_part = { ("=" ~ expr)? ~ ";"? }
var_decl = { var_spec ~ ident ~("is" ~ typename)? ~ var_def_part }


typename_def = { ident ~ gen_clause? }

fn_body = { block }
fn_decl = { modifier* ~ "fn" ~ typename_def ~ fn_decl_args ~ typename? ~ where_clause? ~ (";" | fn_body) }

struct_item = { (ident ~ typename ~ ("\n" | ",")?) }
struct_body = { "{" ~ struct_item* ~ "}" }
tuple_struct_item = { vis? ~ typename }
tuple_struct_body = { ("(" ~ (tuple_struct_item ~ ("," ~ tuple_struct_item)*)? ~ ")")* }
struct_decl = { "struct" ~ typename_def ~ (";" | struct_body | tuple_struct_body) }

enum_variant = { ident ~ ( struct_body  | tuple_struct_body )? }
enum_body = { "{" ~ ( ";"? ~ enum_variant)* ~ "}" }
enum_decl = { "enum" ~ typename_def ~ enum_body }

type_decl = { "type" ~ typename_def ~ "=" ~ typename }
trait_item = { vis? ~ (fn_decl | type_decl) }
trait_decl = { "trait" ~ typename ~ "{" ~ trait_item* ~ "}" }
impl_block = { "impl" ~ typename ~ ("for" ~ typename)? ~ where_clause? ~ "{" ~ item* ~ "}" }

item = { attr* ~ vis? ~((fn_decl | type_decl | trait_decl | struct_decl | enum_decl | var_decl | import_spec | impl_block) ~ ";"? ) }
program = { WHITESPACE* ~ item* ~ WHITESPACE* ~ EOI }