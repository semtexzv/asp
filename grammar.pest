
WHITESPACE = _{ " " | "\n" | "\t" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
NEWLINE = _{"\n" }
KEYWORD = { "fn" | "of" | "to" | "at" | "is" | "where" |  "return" | "contiune" | "break" | "yield"  }

alpha = @{ 'a'..'z' | 'A'..'Z' }
digit = @{ '0'..'9' }
alphanum = @{alpha | digit}

ident = @{ !KEYWORD ~ (alpha ~ (alphanum | "_")*) }
typename = { (path+) ~ gen_clause? }

modifier = @{ !("fn") ~ ident }

attr_name = @{ "#" ~ ident }
attr_spec = @{ " " ~ (!(NEWLINE) ~ ANY)* }
attr = @{ attr_name ~ attr_spec? }
attr_list = @{ (attr ~(NEWLINE ~ attr))?  }

str_lit = _{ "\"" ~ (^"\"") ~ "\"" }
lit_expr = { int_lit | str_lit }
int_lit = @{ digit+ }

arg_list_more = { "," ~ expr }
arg_list = {  (expr ~ arg_list_more*)? ~ ","?}

path_expr = { ident ~ ("." ~ ident)* }
fn_tar = { brace_expr | path_expr }

fn_expr = { fn_tar ~ "("~ arg_list ~ ")" }
mod_expr = { modifier+ ~ "of" ~ expr }
loop_expr = { "loop" ~ block }
brace_expr = { "(" ~ expr ~ ")" }

expr = !{ fn_expr | loop_expr | lit_expr | mod_expr | path_expr }
expr_stmt = ${ expr ~ (";" | "\n") }

path_seg = { ident }
path = { path_seg ~ ("." ~ path_seg)* }
path_star = { path ~ ".*"? }
import_spec = { "use" ~ path_star }

if_cont = { "else" ~ block }
if_stmt = { "if" ~ expr ~ block ~ if_cont* }
for_stmt = { "for" ~ ident ~ "in" ~ expr ~ block }

flow_op = { "return" | "contiune" | "break" | "yield" }
flow_target = { "to" ~ ident }
flow_stmt = { flow_op ~ expr? ~ flow_target? ~ ";"? }

label = @{ ident ~ ":" }
stmt = { if_stmt | for_stmt| loop_expr | flow_stmt | expr_stmt }
block_item_list = { (stmt | label)* }
block = { modifier* ~ "{" ~ block_item_list ~ "}" }

arg_decl = { ident ~ typename }
arg_decl_list = { (arg_decl ~ (","  ~ arg_decl)*)? ~ ","?}
fn_decl_args = { "(" ~ arg_decl_list ~ ")" }

gen_item = { path }
gen_item_list = { (gen_item ~ ("," ~ gen_item)*)? }
gen_clause = { "of" ~ gen_item_list }

where_spec = { gen_item ~ "is" ~ typename }
where_spec_list = { where_spec ~ ("and" ~ where_spec)* }
where_clause = { "where" ~ where_spec_list }

fn_body = { block }
fn_decl = { attr* ~ modifier* ~ "fn" ~ ident ~ gen_clause ~ fn_decl_args ~ typename? ~ where_clause? ~ (";" | fn_body) }

item = { fn_decl | import_spec }
program = { WHITESPACE* ~ item* ~ WHITESPACE* }